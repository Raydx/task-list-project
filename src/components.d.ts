/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TabActivateEvent } from "./components/my-tabs/my-tab";
export { TabActivateEvent } from "./components/my-tabs/my-tab";
export namespace Components {
    interface AddTask {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyTab {
        "active": boolean;
        "name": string;
    }
    interface MyTabs {
        "activeTab": string;
    }
    interface TaskList {
        "tasks": string[];
    }
}
export interface AddTaskCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAddTaskElement;
}
export interface MyTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyTabElement;
}
export interface TaskListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTaskListElement;
}
declare global {
    interface HTMLAddTaskElement extends Components.AddTask, HTMLStencilElement {
    }
    var HTMLAddTaskElement: {
        prototype: HTMLAddTaskElement;
        new (): HTMLAddTaskElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyTabElement extends Components.MyTab, HTMLStencilElement {
    }
    var HTMLMyTabElement: {
        prototype: HTMLMyTabElement;
        new (): HTMLMyTabElement;
    };
    interface HTMLMyTabsElement extends Components.MyTabs, HTMLStencilElement {
    }
    var HTMLMyTabsElement: {
        prototype: HTMLMyTabsElement;
        new (): HTMLMyTabsElement;
    };
    interface HTMLTaskListElement extends Components.TaskList, HTMLStencilElement {
    }
    var HTMLTaskListElement: {
        prototype: HTMLTaskListElement;
        new (): HTMLTaskListElement;
    };
    interface HTMLElementTagNameMap {
        "add-task": HTMLAddTaskElement;
        "my-component": HTMLMyComponentElement;
        "my-tab": HTMLMyTabElement;
        "my-tabs": HTMLMyTabsElement;
        "task-list": HTMLTaskListElement;
    }
}
declare namespace LocalJSX {
    interface AddTask {
        "onTaskAdded"?: (event: AddTaskCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface MyTab {
        "active"?: boolean;
        "name"?: string;
        "onTabActivate"?: (event: MyTabCustomEvent<TabActivateEvent>) => void;
    }
    interface MyTabs {
        "activeTab"?: string;
    }
    interface TaskList {
        "onTaskCompleted"?: (event: TaskListCustomEvent<string>) => void;
        "tasks"?: string[];
    }
    interface IntrinsicElements {
        "add-task": AddTask;
        "my-component": MyComponent;
        "my-tab": MyTab;
        "my-tabs": MyTabs;
        "task-list": TaskList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-task": LocalJSX.AddTask & JSXBase.HTMLAttributes<HTMLAddTaskElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-tab": LocalJSX.MyTab & JSXBase.HTMLAttributes<HTMLMyTabElement>;
            "my-tabs": LocalJSX.MyTabs & JSXBase.HTMLAttributes<HTMLMyTabsElement>;
            "task-list": LocalJSX.TaskList & JSXBase.HTMLAttributes<HTMLTaskListElement>;
        }
    }
}
